from pathlib import Path

# 입력 파일 경로
input_file = Path("/mnt/data/application-0ec44a9c8f22f95c86ab6ae94210e0591c7ff128960f2d1b397b8dd80bce58b1-1.css")

# 파일 읽기
css_text = input_file.read_text(encoding="utf-8", errors="ignore")

# 1) 포맷팅(가독성): 간단한 규칙 기반 pretty-print
# - 중괄호 뒤 줄바꿈
# - 세미콜론 뒤 줄바꿈
# - 중첩 레벨에 따른 들여쓰기
formatted_lines = []
indent = 0
i = 0

def add_line(line, indent_level):
    formatted_lines.append(("  " * indent_level) + line.strip())

buff = ""
for ch in css_text:
    buff += ch
    if ch == "{":
        add_line(buff.strip(), indent)
        indent += 1
        buff = ""
    elif ch == "}":
        if buff.strip():
            # flush declarations before closing brace
            for decl in buff.split(";"):
                if decl.strip():
                    add_line(decl.strip() + ";", indent)
            buff = ""
        indent = max(indent - 1, 0)
        add_line("}", indent)
    elif ch == ";":
        add_line(buff.strip(), indent)
        buff = ""

# 남은 버퍼 처리
if buff.strip():
    add_line(buff.strip(), indent)

formatted_css = "\n".join(formatted_lines)

# 2) 최소화(minify): 주석 제거, 공백 축소
import re
min_css = css_text

# 주석 제거 (/* ... */)
min_css = re.sub(r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/", "", min_css)

# 공백/개행 축소
min_css = re.sub(r"\s+", " ", min_css)              # 모든 연속 공백을 한 칸으로
min_css = re.sub(r"\s*([{};:,>])\s*", r"\1", min_css)  # 토큰 주변 공백 제거
min_css = re.sub(r";}", "}", min_css)               # 마지막 세미콜론 제거
min_css = min_css.strip()

# 출력 파일 저장
formatted_path = Path("/mnt/data/application.formatted.css")
minified_path = Path("/mnt/data/application.min.css")

formatted_path.write_text(formatted_css, encoding="utf-8")
minified_path.write_text(min_css, encoding="utf-8")

(str(formatted_path), str(minified_path))
